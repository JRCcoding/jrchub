{"ast":null,"code":"var e = require(\"react\");\nfunction t() {\n  return (t = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = arguments[t];\n      for (var o in r) Object.prototype.hasOwnProperty.call(r, o) && (e[o] = r[o]);\n    }\n    return e;\n  }).apply(this, arguments);\n}\nvar r = 0,\n  o = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\", \"Foxtrot\", \"Golf\", \"Hotel\", \"India\", \"Juliett\", \"Kilo\", \"Lima\", \"Mike\", \"November\", \"Oscar\", \"Papa\", \"Quebec\", \"Romea\", \"Sierra\", \"Tango\", \"Uniform\", \"Victor\", \"Whiskey\", \"X-ray\", \"Yankee\", \"Zulu\"];\nexports.createSlice = function (n) {\n  if (\"object\" != typeof n) throw Error(\"react-slice: createSlice takes options object as first parameter\");\n  if (\"function\" != typeof n.reducer) throw Error(\"react-slice createSlice must include reducer function\");\n  return \"string\" != typeof n.debugName && (n.debugName = \"State\" + o[r++ % o.length]), function (r) {\n    var o = r.initialState,\n      n = {},\n      c = !1,\n      a = {\n        subscribe: function (e) {\n          var t = Math.random().toString(36).substring(7);\n          return n[t] = e, function () {\n            delete n[t];\n          };\n        },\n        getState: function () {\n          return o;\n        },\n        dispatch: function (e) {\n          var t = o;\n          o = r.reducer(o, e), (\"undefined\" == typeof process || \"production\" !== process.env.NODE_ENV && \"test\" !== process.env.NODE_ENV) && function (e, t, r, o) {\n            var n;\n            void 0 !== console.groupCollapsed && ((n = console).groupCollapsed.apply(n, [\"%c \" + [\"react-slice\", \"%c\" + e].join(\" \")].concat([\"color: gray; font-weight: lighter;\", \"\"])), console.log(\"%cprev state   \", \"color: #9E9E9E; font-weight: bold;\", r), console.log(\"%caction      \", \"color: #03A9F4; font-weight: bold;\", t), console.log(\"%cnext state   \", \"color: #4CAF50; font-weight: bold;\", o), console.groupEnd());\n          }(r.debugName, e, t, o), c || (c = !0, setTimeout(function () {\n            c = !1, function (e) {\n              Object.values(n).forEach(function (t) {\n                t(e);\n              });\n            }(o);\n          }, 0));\n        }\n      };\n    return t({}, a, {\n      use: function (t) {\n        var r = e.useState(new Date())[1],\n          o = a.getState(),\n          n = function (t, r) {\n            var o = e.useRef([]),\n              n = e.useCallback(function (e) {\n                if (\"function\" != typeof r) return !0;\n                var t = r(e);\n                if (!Array.isArray(t)) throw Error(\"react-slice: update dependency function returned a non-array\");\n                var n = t.length !== o.current.length;\n                return !n && t.forEach(function (e, t) {\n                  e !== o.current[t] && (n = !0);\n                }), o.current = t, n;\n              }, [r]);\n            return e.useEffect(function () {\n              n(t);\n            }, [n]), n;\n          }(o, t);\n        return e.useEffect(function () {\n          return a.subscribe(function (e) {\n            n(e) && r(new Date());\n          });\n        }, [a, n]), o;\n      }\n    });\n  }(n);\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,IAAIA,IAAQ;EACNC,IAAa,CACjB,SACA,SACA,WACA,SACA,QACA,WACA,QACA,SACA,SACA,WACA,QACA,QACA,QACA,YACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,UACA,WACA,SACA,UACA;AAAAC,gCCRAC;EAEA,IAAuB,mBAAZA,GACT,MAAMC,MACJ;EAIJ,IAA+B,qBAApBD,EAAQE,SACjB,MAAMD,MAAM;EAQd,OAJiC,mBAAtBD,EAAQG,cACjBH,EAAQG,sBDHKL,EAAWD,MAAUC,EAAWM,oBEpB/CJ;IAEA,IAAIK,IAAgBL,EAAQM;MAEtBC,IAA2C;MAM7CC,KAAW;MAYTC,IAAuD;QAC3DC,WAAW,UAACC;UACV,IAAMC,IAAKC,KAAKC,SAASC,SAAS,IAAIC,UAAU;UAIhD,OAFAT,EAAYK,KAAMD;YAAAA,OAGTJ,EAAYK;UAAAA;QAAAA;QAGvBK,UAAU;UAAA,OAAcZ;QAAAA;QACxBa,UAAU,UAACC;UACT,IAAMC,IAAYf;UAClBA,IAAQL,EAAQE,QAAQG,GAAOc,KAGV,sBAAZE,WACmB,iBAAzBA,QAAQC,IAAIC,YACc,WAAzBF,QAAQC,IAAIC,uBCjDpBC,GACAL,GACAC,GACAK;YAAAA;YAAAA,KAEsC,MAA3BC,QAAQC,wBAIjBD,SAAQC,iCAHM,uBAAqBH,GAGAI,KAAK,aAFzB,CAAC,sCAAsC,OAItDF,QAAQG,IACN,mBACA,sCACAT,IAEFM,QAAQG,IAAI,kBAAkB,sCAAsCV,IACpEO,QAAQG,IACN,mBACA,sCACAJ,IAEFC,QAAQI;UAAAA,CD6BJC,CAAY/B,EAAQG,WAAWgB,GAAQC,GAAWf,IA9BlDG,MAGJA,KAAW,GACXwB,WAAW;YACTxB,KAAW,GAZA,UAACH;cACd4B,OAAOC,OAAO3B,GAAa4B,QAAQ,UAACxB;gBAClCA,EAASN;cAAAA;YAAAA,CAWT+B,CAAO/B;UAAAA,GACN;QAAA;MAAA;IAkDL,aAnBKI;MACH4B,KAAK,UAAkBC;QAAAA,IACFC,IAAiBC,WAAS,IAAIC;UAC3CpC,IAAgBI,EAAUQ;UAE1ByB,cE9DVC,GACAC;YAEA,IAAMC,IAAWC,SAAO;cAClBJ,IAAaK,cACjB;gBACE,IAA6B,qBAAlBH,GACT;gBAGF,IAAMI,IAAOJ,EAAcK;gBAC3B,KAAKC,MAAMC,QAAQH,IACjB,MAAM/C,MACJ;gBAGJ,IAAImD,IAAcJ,EAAK5C,WAAWyC,EAASQ,QAAQjD;gBAQnD,QAPCgD,KACCJ,EAAKb,QAAQ,UAACmB,GAAGC;kBACXD,MAAMT,EAASQ,QAAQE,OACzBH,KAAc;gBAAA,IAGpBP,EAASQ,UAAUL,GACZI;cAAAA,GAET,CAACR;YAOH,OAJAY,YAAU;cACRd,EAAWC;YAAAA,GACV,CAACD,KAEGA;UAAAA,CF6BgBe,CAAsBpD,GAAOiC;QAUhD,OARAkB,YAAU;UACR,OAAO/C,EAAUC,UAAU,UAACgD;YACtBhB,EAAWgB,MACbnB,EAAc,IAAIE;UAAAA;QAAAA,GAGrB,CAAChC,GAAWiC,KAERrC;MAAAA;IAAAA;EAAAA,CDvCJsD,CAA8B3D;AAAAA","names":["index","radioNames","exports","options","Error","reducer","debugName","length","state","initialState","subscribers","hasTimer","tempStore","subscribe","callback","id","Math","random","toString","substring","getState","dispatch","action","prevState","process","env","NODE_ENV","name","nextState","console","groupCollapsed","join","log","groupEnd","debugLogger","setTimeout","Object","values","forEach","notify","use","uniqueFn","setUpdateBust","useState","Date","hasChanges","slice","updateDepFunc","lastDeps","useRef","useCallback","deps","s","Array","isArray","isDifferent","current","a","i","useEffect","useHasChanges","newState","createStore"],"sources":["/home/jrccode/Dev/React/jrchub/frontend/node_modules/react-slice/src/utils/assignRadioName.ts","/home/jrccode/Dev/React/jrchub/frontend/node_modules/react-slice/src/createSlice.ts","/home/jrccode/Dev/React/jrchub/frontend/node_modules/react-slice/src/utils/createStore.ts","/home/jrccode/Dev/React/jrchub/frontend/node_modules/react-slice/src/utils/debugLogger.ts","/home/jrccode/Dev/React/jrchub/frontend/node_modules/react-slice/src/utils/useHasChanges.ts"],"sourcesContent":["let index = 0;\nconst radioNames = [\n  'Alpha',\n  'Bravo',\n  'Charlie',\n  'Delta',\n  'Echo',\n  'Foxtrot',\n  'Golf',\n  'Hotel',\n  'India',\n  'Juliett',\n  'Kilo',\n  'Lima',\n  'Mike',\n  'November',\n  'Oscar',\n  'Papa',\n  'Quebec',\n  'Romea',\n  'Sierra',\n  'Tango',\n  'Uniform',\n  'Victor',\n  'Whiskey',\n  'X-ray',\n  'Yankee',\n  'Zulu'\n];\nexport function assignRadioName() {\n  return `State${radioNames[index++ % radioNames.length]}`;\n}\n","import createStore from './utils/createStore';\nimport { ISliceOptions } from './types';\nimport { assignRadioName } from './utils/assignRadioName';\n\n/**\n * createSlice(options)\n * @example\n * createSlice({\n *   reducer: (state, action) => {\n *     if(action === 'increment')Â return state + 1;\n *     if(action === 'decrement')Â return state - 1;\n *     return state;\n *   },\n *   initialState: 0, // optional\n *   debugName: 'Counter' // optional\n * })\n */\n\nexport default function createSlice<TState = any, TActions = any>(\n  options: ISliceOptions<TState, TActions>\n) {\n  if (typeof options !== 'object') {\n    throw Error(\n      'react-slice: createSlice takes options object as first parameter'\n    );\n  }\n\n  if (typeof options.reducer !== 'function') {\n    throw Error('react-slice createSlice must include reducer function');\n  }\n\n  // Make sure we get a nice name (StateAlpha, StateBravo, StateCharlie ðŸ˜‚)\n  if (typeof options.debugName !== 'string') {\n    options.debugName = assignRadioName();\n  }\n\n  return createStore<TState, TActions>(options);\n}\n","import { useState, useEffect } from 'react';\nimport debugLogger from './debugLogger';\nimport useHasChanges from './useHasChanges';\nimport { ISliceOptions, ISliceStore } from '../types';\n\ntype TSubscriptionObject<TState> = {\n  [id: string]: (state: TState) => void;\n};\n\nexport default function createStore<TState, TAction>(\n  options: ISliceOptions<TState, TAction>\n): ISliceStore<TState, TAction> {\n  let state: TState = options.initialState;\n\n  const subscribers: TSubscriptionObject<TState> = {};\n  const notify = (state: TState) => {\n    Object.values(subscribers).forEach((callback) => {\n      callback(state);\n    });\n  };\n  let hasTimer = false;\n  const scheduleUpdate = () => {\n    if (hasTimer) {\n      return;\n    }\n    hasTimer = true;\n    setTimeout(() => {\n      hasTimer = false;\n      notify(state);\n    }, 0);\n  };\n\n  const tempStore: Omit<ISliceStore<TState, TAction>, 'use'> = {\n    subscribe: (callback) => {\n      const id = Math.random().toString(36).substring(7);\n\n      subscribers[id] = callback;\n\n      return () => {\n        delete subscribers[id];\n      };\n    },\n    getState: (): TState => state,\n    dispatch: (action: TAction) => {\n      const prevState = state;\n      state = options.reducer(state, action);\n\n      if (\n        typeof process === 'undefined' ||\n        (process.env.NODE_ENV !== 'production' &&\n          process.env.NODE_ENV !== 'test')\n      ) {\n        debugLogger(options.debugName, action, prevState, state);\n      }\n\n      scheduleUpdate();\n    },\n  };\n\n  const store: ISliceStore<TState, TAction> = {\n    ...tempStore,\n    use: function useSlice(uniqueFn?: (state: TState) => any[]): TState {\n      const [updateBust, setUpdateBust] = useState(new Date());\n      const state: TState = tempStore.getState();\n\n      const hasChanges = useHasChanges<TState>(state, uniqueFn);\n\n      useEffect(() => {\n        return tempStore.subscribe((newState) => {\n          if (hasChanges(newState)) {\n            setUpdateBust(new Date());\n          }\n        });\n      }, [tempStore, hasChanges]);\n\n      return state;\n    },\n  };\n\n  return store;\n}\n","export default <Actions, State>(\n  name: string,\n  action: Actions,\n  prevState: State,\n  nextState: State\n) => {\n  if (typeof console.groupCollapsed !== 'undefined') {\n    const title = [`react-slice`, `%c${name}`];\n    const styles = ['color: gray; font-weight: lighter;', ''];\n\n    console.groupCollapsed(`%c ${title.join(' ')}`, ...styles);\n\n    console.log(\n      '%cprev state   ',\n      'color: #9E9E9E; font-weight: bold;',\n      prevState\n    );\n    console.log('%caction      ', 'color: #03A9F4; font-weight: bold;', action);\n    console.log(\n      '%cnext state   ',\n      'color: #4CAF50; font-weight: bold;',\n      nextState\n    );\n    console.groupEnd();\n  }\n};\n","import { useRef, useCallback, useEffect } from 'react';\n\nexport default function useHasChanges<TState>(\n  slice: TState,\n  updateDepFunc: (state: TState) => any[]\n) {\n  const lastDeps = useRef([]);\n  const hasChanges = useCallback(\n    s => {\n      if (typeof updateDepFunc !== 'function') {\n        return true;\n      }\n\n      const deps = updateDepFunc(s);\n      if (!Array.isArray(deps)) {\n        throw Error(\n          'react-slice: update dependency function returned a non-array'\n        );\n      }\n      let isDifferent = deps.length !== lastDeps.current.length;\n      !isDifferent &&\n        deps.forEach((a, i) => {\n          if (a !== lastDeps.current[i]) {\n            isDifferent = true;\n          }\n        });\n      lastDeps.current = deps;\n      return isDifferent;\n    },\n    [updateDepFunc]\n  );\n\n  useEffect(() => {\n    hasChanges(slice);\n  }, [hasChanges]);\n\n  return hasChanges;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}